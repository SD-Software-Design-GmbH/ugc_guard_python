# coding: utf-8

"""
    UGC Guard API

    API for UGC Guard. A tool to help you manage reports on user generated content.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ugc_guard_python.models.filled_guard_evaluation import FilledGuardEvaluation

class TestFilledGuardEvaluation(unittest.TestCase):
    """FilledGuardEvaluation unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> FilledGuardEvaluation:
        """Test FilledGuardEvaluation
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `FilledGuardEvaluation`
        """
        model = FilledGuardEvaluation()
        if include_optional:
            return FilledGuardEvaluation(
                guard_evaluation = ugc_guard_python.models.guard_evaluation.GuardEvaluation(
                    id = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    ongoing = True, 
                    passed = True, 
                    task_id = '', 
                    guard_id = '', 
                    report_id = '', 
                    severity = 56, ),
                ai_evaluations = [
                    ugc_guard_python.models.ai_evaluation.AIEvaluation(
                        ai_selected_category = 'hate_speech', 
                        severity = 1.0, 
                        explanation = '', 
                        action_recommendation = '', 
                        rule_id = '', 
                        id = '', 
                        report_id = '', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        ai_model = '', 
                        generated_tokens = 56, )
                    ],
                deterministic_evaluations = [
                    ugc_guard_python.models.deterministic_evaluation.DeterministicEvaluation(
                        id = '', 
                        rule_id = '', 
                        report_id = '', 
                        matched_words = [
                            ''
                            ], 
                        is_match = True, )
                    ]
            )
        else:
            return FilledGuardEvaluation(
                guard_evaluation = ugc_guard_python.models.guard_evaluation.GuardEvaluation(
                    id = '', 
                    created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    ongoing = True, 
                    passed = True, 
                    task_id = '', 
                    guard_id = '', 
                    report_id = '', 
                    severity = 56, ),
        )
        """

    def testFilledGuardEvaluation(self):
        """Test FilledGuardEvaluation"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
