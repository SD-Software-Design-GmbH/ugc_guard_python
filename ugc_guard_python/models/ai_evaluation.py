# coding: utf-8

"""
    UGC Guard API

    API for UGC Guard. A tool to help you manage reports on user generated content.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from ugc_guard_python.models.report_category import ReportCategory
from typing import Optional, Set
from typing_extensions import Self

class AIEvaluation(BaseModel):
    """
    Model for AI evaluation. This is used to store the evaluation of AI models.
    """ # noqa: E501
    ai_selected_category: Optional[ReportCategory] = None
    severity: Optional[Annotated[int, Field(le=5, strict=True, ge=1)]] = Field(default=1, description="Severity of the report, 1-5, 5 being the most severe. ")
    explanation: Optional[StrictStr] = Field(default=None, description="Explanation of the AI's decision")
    action_recommendation: Optional[StrictStr] = Field(default=None, description="Recommended action to take on the report")
    rule_id: Optional[StrictStr]
    id: Optional[StrictStr] = None
    report_id: Optional[StrictStr]
    created_at: Optional[datetime] = None
    ai_model: StrictStr = Field(description="The AI model that performed the evaluation")
    generated_tokens: Optional[StrictInt] = Field(default=0, description="The number of tokens generated by the AI model during the evaluation")
    __properties: ClassVar[List[str]] = ["ai_selected_category", "severity", "explanation", "action_recommendation", "rule_id", "id", "report_id", "created_at", "ai_model", "generated_tokens"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AIEvaluation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if rule_id (nullable) is None
        # and model_fields_set contains the field
        if self.rule_id is None and "rule_id" in self.model_fields_set:
            _dict['rule_id'] = None

        # set to None if report_id (nullable) is None
        # and model_fields_set contains the field
        if self.report_id is None and "report_id" in self.model_fields_set:
            _dict['report_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AIEvaluation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ai_selected_category": obj.get("ai_selected_category"),
            "severity": obj.get("severity") if obj.get("severity") is not None else 1,
            "explanation": obj.get("explanation"),
            "action_recommendation": obj.get("action_recommendation"),
            "rule_id": obj.get("rule_id"),
            "id": obj.get("id"),
            "report_id": obj.get("report_id"),
            "created_at": obj.get("created_at"),
            "ai_model": obj.get("ai_model"),
            "generated_tokens": obj.get("generated_tokens") if obj.get("generated_tokens") is not None else 0
        })
        return _obj


