# coding: utf-8

"""
    UGC Guard API

    API for UGC Guard. A tool to help you manage reports on user generated content.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ugc_guard_python.models.person import Person
from ugc_guard_python.models.report_category import ReportCategory
from typing import Optional, Set
from typing_extensions import Self

class ReportersWithPerson(BaseModel):
    """
    Reporters with person information.
    """ # noqa: E501
    report_id: StrictStr
    reporter_id: StrictStr
    created_at: Optional[datetime] = None
    reporter_category: Optional[ReportCategory] = None
    custom_message: Optional[StrictStr] = None
    reporter: Optional[Person] = None
    __properties: ClassVar[List[str]] = ["report_id", "reporter_id", "created_at", "reporter_category", "custom_message", "reporter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ReportersWithPerson from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of reporter
        if self.reporter:
            _dict['reporter'] = self.reporter.to_dict()
        # set to None if reporter (nullable) is None
        # and model_fields_set contains the field
        if self.reporter is None and "reporter" in self.model_fields_set:
            _dict['reporter'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ReportersWithPerson from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "report_id": obj.get("report_id"),
            "reporter_id": obj.get("reporter_id"),
            "created_at": obj.get("created_at"),
            "reporter_category": obj.get("reporter_category"),
            "custom_message": obj.get("custom_message"),
            "reporter": Person.from_dict(obj["reporter"]) if obj.get("reporter") is not None else None
        })
        return _obj


