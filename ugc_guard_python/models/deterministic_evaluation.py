# coding: utf-8

"""
    UGC Guard API

    API for UGC Guard. A tool to help you manage reports on user generated content.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeterministicEvaluation(BaseModel):
    """
    Base model for deterministic rule evaluations.  This model is used to store the results of deterministic rule evaluations.
    """ # noqa: E501
    id: Optional[StrictStr] = None
    rule_id: Optional[StrictStr] = Field(default=None, description="ID of the rule that was evaluated")
    report_id: Optional[StrictStr] = None
    matched_words: Optional[List[StrictStr]] = Field(default=None, description="List of words that matched the rule during evaluation. If blacklist is used, these are the words that triggered the rule. If whitelist is used, these are the words that did trigger the rule because they are not part of the whitelist")
    is_match: Optional[StrictBool] = Field(default=False, description="Indicates whether the rule matched the content of the report")
    __properties: ClassVar[List[str]] = ["id", "rule_id", "report_id", "matched_words", "is_match"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeterministicEvaluation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if report_id (nullable) is None
        # and model_fields_set contains the field
        if self.report_id is None and "report_id" in self.model_fields_set:
            _dict['report_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeterministicEvaluation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "rule_id": obj.get("rule_id"),
            "report_id": obj.get("report_id"),
            "matched_words": obj.get("matched_words"),
            "is_match": obj.get("is_match") if obj.get("is_match") is not None else False
        })
        return _obj


