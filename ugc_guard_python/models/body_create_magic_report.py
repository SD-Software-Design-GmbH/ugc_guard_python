# coding: utf-8

"""
    UGC Guard API

    API for UGC Guard. A tool to help you manage reports on user generated content.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ugc_guard_python.models.content_create import ContentCreate
from ugc_guard_python.models.main_content_sender import MainContentSender
from ugc_guard_python.models.person import Person
from ugc_guard_python.models.report_create import ReportCreate
from ugc_guard_python.models.reporter import Reporter
from typing import Optional, Set
from typing_extensions import Self

class BodyCreateMagicReport(BaseModel):
    """
    BodyCreateMagicReport
    """ # noqa: E501
    report: ReportCreate
    reporter: Reporter
    main_content: ContentCreate
    main_content_sender: MainContentSender
    report_context: List[ContentCreate]
    report_context_persons: List[Person]
    channels: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["report", "reporter", "main_content", "main_content_sender", "report_context", "report_context_persons", "channels"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BodyCreateMagicReport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of report
        if self.report:
            _dict['report'] = self.report.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reporter
        if self.reporter:
            _dict['reporter'] = self.reporter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of main_content
        if self.main_content:
            _dict['main_content'] = self.main_content.to_dict()
        # override the default output from pydantic by calling `to_dict()` of main_content_sender
        if self.main_content_sender:
            _dict['main_content_sender'] = self.main_content_sender.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in report_context (list)
        _items = []
        if self.report_context:
            for _item_report_context in self.report_context:
                if _item_report_context:
                    _items.append(_item_report_context.to_dict())
            _dict['report_context'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in report_context_persons (list)
        _items = []
        if self.report_context_persons:
            for _item_report_context_persons in self.report_context_persons:
                if _item_report_context_persons:
                    _items.append(_item_report_context_persons.to_dict())
            _dict['report_context_persons'] = _items
        # set to None if channels (nullable) is None
        # and model_fields_set contains the field
        if self.channels is None and "channels" in self.model_fields_set:
            _dict['channels'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BodyCreateMagicReport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "report": ReportCreate.from_dict(obj["report"]) if obj.get("report") is not None else None,
            "reporter": Reporter.from_dict(obj["reporter"]) if obj.get("reporter") is not None else None,
            "main_content": ContentCreate.from_dict(obj["main_content"]) if obj.get("main_content") is not None else None,
            "main_content_sender": MainContentSender.from_dict(obj["main_content_sender"]) if obj.get("main_content_sender") is not None else None,
            "report_context": [ContentCreate.from_dict(_item) for _item in obj["report_context"]] if obj.get("report_context") is not None else None,
            "report_context_persons": [Person.from_dict(_item) for _item in obj["report_context_persons"]] if obj.get("report_context_persons") is not None else None,
            "channels": obj.get("channels")
        })
        return _obj


