# coding: utf-8

"""
    UGC Guard API

    API for UGC Guard. A tool to help you manage reports on user generated content.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PublicImage(BaseModel):
    """
    A public image is an image that is available for public access, typically stored in S3 or similar storage. Public images can be profile pictures (of UGC Guard users), logos of organizations, or other images that are not sensitive and can be shared publicly.  These images are available via a public URL.
    """ # noqa: E501
    id: Optional[StrictStr] = None
    file_path: Optional[StrictStr] = None
    file_type: Optional[StrictStr] = None
    file_size: Optional[StrictInt] = None
    uploader_id: Optional[StrictStr]
    blur_hash: Optional[StrictStr] = None
    in_s3: Optional[StrictBool] = False
    uploaded_at: Optional[datetime] = None
    removed_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["id", "file_path", "file_type", "file_size", "uploader_id", "blur_hash", "in_s3", "uploaded_at", "removed_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PublicImage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if uploader_id (nullable) is None
        # and model_fields_set contains the field
        if self.uploader_id is None and "uploader_id" in self.model_fields_set:
            _dict['uploader_id'] = None

        # set to None if blur_hash (nullable) is None
        # and model_fields_set contains the field
        if self.blur_hash is None and "blur_hash" in self.model_fields_set:
            _dict['blur_hash'] = None

        # set to None if removed_at (nullable) is None
        # and model_fields_set contains the field
        if self.removed_at is None and "removed_at" in self.model_fields_set:
            _dict['removed_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PublicImage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "file_path": obj.get("file_path"),
            "file_type": obj.get("file_type"),
            "file_size": obj.get("file_size"),
            "uploader_id": obj.get("uploader_id"),
            "blur_hash": obj.get("blur_hash"),
            "in_s3": obj.get("in_s3") if obj.get("in_s3") is not None else False,
            "uploaded_at": obj.get("uploaded_at"),
            "removed_at": obj.get("removed_at")
        })
        return _obj


