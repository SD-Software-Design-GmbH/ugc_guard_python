# coding: utf-8

"""
    UGC Guard API

    API for UGC Guard. A tool to help you manage reports on user generated content.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class File(BaseModel):
    """
    A file is a somewhere stored object that is related to a report or content.
    """ # noqa: E501
    id: Optional[StrictStr] = None
    report_id: Optional[StrictStr]
    content_id: Optional[StrictStr]
    file_path: Optional[StrictStr] = None
    file_type: Optional[StrictStr] = None
    file_size: Optional[StrictInt] = None
    blur_hash: Optional[StrictStr] = None
    uploader_id: Optional[StrictStr]
    in_s3: Optional[StrictBool] = False
    secret: Optional[StrictStr] = None
    uploaded_at: Optional[datetime] = None
    removed_at: Optional[datetime] = None
    module_id: StrictStr
    __properties: ClassVar[List[str]] = ["id", "report_id", "content_id", "file_path", "file_type", "file_size", "blur_hash", "uploader_id", "in_s3", "secret", "uploaded_at", "removed_at", "module_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of File from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if report_id (nullable) is None
        # and model_fields_set contains the field
        if self.report_id is None and "report_id" in self.model_fields_set:
            _dict['report_id'] = None

        # set to None if content_id (nullable) is None
        # and model_fields_set contains the field
        if self.content_id is None and "content_id" in self.model_fields_set:
            _dict['content_id'] = None

        # set to None if uploader_id (nullable) is None
        # and model_fields_set contains the field
        if self.uploader_id is None and "uploader_id" in self.model_fields_set:
            _dict['uploader_id'] = None

        # set to None if secret (nullable) is None
        # and model_fields_set contains the field
        if self.secret is None and "secret" in self.model_fields_set:
            _dict['secret'] = None

        # set to None if removed_at (nullable) is None
        # and model_fields_set contains the field
        if self.removed_at is None and "removed_at" in self.model_fields_set:
            _dict['removed_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of File from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "report_id": obj.get("report_id"),
            "content_id": obj.get("content_id"),
            "file_path": obj.get("file_path"),
            "file_type": obj.get("file_type"),
            "file_size": obj.get("file_size"),
            "blur_hash": obj.get("blur_hash"),
            "uploader_id": obj.get("uploader_id"),
            "in_s3": obj.get("in_s3") if obj.get("in_s3") is not None else False,
            "secret": obj.get("secret"),
            "uploaded_at": obj.get("uploaded_at"),
            "removed_at": obj.get("removed_at"),
            "module_id": obj.get("module_id")
        })
        return _obj


