# coding: utf-8

"""
    UGC Guard API

    API for UGC Guard. A tool to help you manage reports on user generated content.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ugc_guard_python.models.deterministic_rule_validation_options import DeterministicRuleValidationOptions
from typing import Optional, Set
from typing_extensions import Self

class DeterministicRuleOptions(BaseModel):
    """
    Options for deterministic rules, such as blacklists or whitelists.
    """ # noqa: E501
    id: Optional[StrictStr] = None
    words: Optional[List[StrictStr]] = Field(default=None, description="List of words for the deterministic rule, e.g., blacklisted or whitelisted words")
    is_blacklist: Optional[StrictBool] = Field(default=True, description="Indicates whether the rule is a blacklist (True) or a whitelist (False)")
    threshold: Optional[StrictInt] = None
    validation_option: Optional[DeterministicRuleValidationOptions] = None
    __properties: ClassVar[List[str]] = ["id", "words", "is_blacklist", "threshold", "validation_option"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeterministicRuleOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if threshold (nullable) is None
        # and model_fields_set contains the field
        if self.threshold is None and "threshold" in self.model_fields_set:
            _dict['threshold'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeterministicRuleOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "words": obj.get("words"),
            "is_blacklist": obj.get("is_blacklist") if obj.get("is_blacklist") is not None else True,
            "threshold": obj.get("threshold"),
            "validation_option": obj.get("validation_option")
        })
        return _obj


