# coding: utf-8

"""
    UGC Guard API

    API for UGC Guard. A tool to help you manage reports on user generated content.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from ugc_guard_python.models.ai_evaluation import AIEvaluation
from ugc_guard_python.models.deterministic_evaluation import DeterministicEvaluation
from ugc_guard_python.models.guard_evaluation import GuardEvaluation
from typing import Optional, Set
from typing_extensions import Self

class FilledGuardEvaluation(BaseModel):
    """
    Model for a filled guard evaluation, which includes the guard and its evaluations.
    """ # noqa: E501
    guard_evaluation: GuardEvaluation
    ai_evaluations: Optional[List[AIEvaluation]] = None
    deterministic_evaluations: Optional[List[DeterministicEvaluation]] = None
    __properties: ClassVar[List[str]] = ["guard_evaluation", "ai_evaluations", "deterministic_evaluations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FilledGuardEvaluation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of guard_evaluation
        if self.guard_evaluation:
            _dict['guard_evaluation'] = self.guard_evaluation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ai_evaluations (list)
        _items = []
        if self.ai_evaluations:
            for _item_ai_evaluations in self.ai_evaluations:
                if _item_ai_evaluations:
                    _items.append(_item_ai_evaluations.to_dict())
            _dict['ai_evaluations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in deterministic_evaluations (list)
        _items = []
        if self.deterministic_evaluations:
            for _item_deterministic_evaluations in self.deterministic_evaluations:
                if _item_deterministic_evaluations:
                    _items.append(_item_deterministic_evaluations.to_dict())
            _dict['deterministic_evaluations'] = _items
        # set to None if ai_evaluations (nullable) is None
        # and model_fields_set contains the field
        if self.ai_evaluations is None and "ai_evaluations" in self.model_fields_set:
            _dict['ai_evaluations'] = None

        # set to None if deterministic_evaluations (nullable) is None
        # and model_fields_set contains the field
        if self.deterministic_evaluations is None and "deterministic_evaluations" in self.model_fields_set:
            _dict['deterministic_evaluations'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FilledGuardEvaluation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "guard_evaluation": GuardEvaluation.from_dict(obj["guard_evaluation"]) if obj.get("guard_evaluation") is not None else None,
            "ai_evaluations": [AIEvaluation.from_dict(_item) for _item in obj["ai_evaluations"]] if obj.get("ai_evaluations") is not None else None,
            "deterministic_evaluations": [DeterministicEvaluation.from_dict(_item) for _item in obj["deterministic_evaluations"]] if obj.get("deterministic_evaluations") is not None else None
        })
        return _obj


