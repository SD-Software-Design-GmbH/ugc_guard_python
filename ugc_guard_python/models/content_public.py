# coding: utf-8

"""
    UGC Guard API

    API for UGC Guard. A tool to help you manage reports on user generated content.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ugc_guard_python.models.comment_with_creator import CommentWithCreator
from ugc_guard_python.models.content_type import ContentType
from ugc_guard_python.models.person import Person
from typing import Optional, Set
from typing_extensions import Self

class ContentPublic(BaseModel):
    """
    ContentPublic
    """ # noqa: E501
    body_type: Optional[ContentType] = None
    body: Optional[StrictStr] = None
    media_identifiers: Optional[List[StrictStr]] = None
    extra_data: Optional[Dict[str, Any]] = None
    created_at: Optional[datetime] = None
    unique_partner_id: Optional[StrictStr] = None
    ip: Optional[StrictStr] = None
    creator_id: Optional[StrictStr]
    type_id: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    creator: Optional[Person] = None
    comments: Optional[List[CommentWithCreator]] = None
    __properties: ClassVar[List[str]] = ["body_type", "body", "media_identifiers", "extra_data", "created_at", "unique_partner_id", "ip", "creator_id", "type_id", "id", "creator", "comments"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContentPublic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of creator
        if self.creator:
            _dict['creator'] = self.creator.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in comments (list)
        _items = []
        if self.comments:
            for _item_comments in self.comments:
                if _item_comments:
                    _items.append(_item_comments.to_dict())
            _dict['comments'] = _items
        # set to None if body (nullable) is None
        # and model_fields_set contains the field
        if self.body is None and "body" in self.model_fields_set:
            _dict['body'] = None

        # set to None if ip (nullable) is None
        # and model_fields_set contains the field
        if self.ip is None and "ip" in self.model_fields_set:
            _dict['ip'] = None

        # set to None if creator_id (nullable) is None
        # and model_fields_set contains the field
        if self.creator_id is None and "creator_id" in self.model_fields_set:
            _dict['creator_id'] = None

        # set to None if type_id (nullable) is None
        # and model_fields_set contains the field
        if self.type_id is None and "type_id" in self.model_fields_set:
            _dict['type_id'] = None

        # set to None if creator (nullable) is None
        # and model_fields_set contains the field
        if self.creator is None and "creator" in self.model_fields_set:
            _dict['creator'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContentPublic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "body_type": obj.get("body_type"),
            "body": obj.get("body"),
            "media_identifiers": obj.get("media_identifiers"),
            "extra_data": obj.get("extra_data"),
            "created_at": obj.get("created_at"),
            "unique_partner_id": obj.get("unique_partner_id"),
            "ip": obj.get("ip"),
            "creator_id": obj.get("creator_id"),
            "type_id": obj.get("type_id"),
            "id": obj.get("id"),
            "creator": Person.from_dict(obj["creator"]) if obj.get("creator") is not None else None,
            "comments": [CommentWithCreator.from_dict(_item) for _item in obj["comments"]] if obj.get("comments") is not None else None
        })
        return _obj


