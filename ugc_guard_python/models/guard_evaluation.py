# coding: utf-8

"""
    UGC Guard API

    API for UGC Guard. A tool to help you manage reports on user generated content.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GuardEvaluation(BaseModel):
    """
    Model for the evaluation of guards.  This model is used to store the results of guard evaluations.
    """ # noqa: E501
    id: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    ongoing: Optional[StrictBool] = Field(default=True, description="Indicates whether the evaluation is still ongoing or has been completed")
    passed: Optional[StrictBool] = None
    task_id: Optional[StrictStr] = None
    guard_id: StrictStr = Field(description="ID of the guard that was evaluated")
    report_id: Optional[StrictStr]
    severity: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["id", "created_at", "ongoing", "passed", "task_id", "guard_id", "report_id", "severity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GuardEvaluation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if passed (nullable) is None
        # and model_fields_set contains the field
        if self.passed is None and "passed" in self.model_fields_set:
            _dict['passed'] = None

        # set to None if task_id (nullable) is None
        # and model_fields_set contains the field
        if self.task_id is None and "task_id" in self.model_fields_set:
            _dict['task_id'] = None

        # set to None if report_id (nullable) is None
        # and model_fields_set contains the field
        if self.report_id is None and "report_id" in self.model_fields_set:
            _dict['report_id'] = None

        # set to None if severity (nullable) is None
        # and model_fields_set contains the field
        if self.severity is None and "severity" in self.model_fields_set:
            _dict['severity'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GuardEvaluation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "ongoing": obj.get("ongoing") if obj.get("ongoing") is not None else True,
            "passed": obj.get("passed"),
            "task_id": obj.get("task_id"),
            "guard_id": obj.get("guard_id"),
            "report_id": obj.get("report_id"),
            "severity": obj.get("severity")
        })
        return _obj


