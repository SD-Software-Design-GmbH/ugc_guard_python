# coding: utf-8

"""
    UGC Guard API

    API for UGC Guard. A tool to help you manage reports on user generated content.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ugc_guard_python.models.action_base import ActionBase
from ugc_guard_python.models.person import Person
from ugc_guard_python.models.user_base import UserBase
from typing import Optional, Set
from typing_extensions import Self

class ExtendedActionHistory(BaseModel):
    """
    Represents an extended action history with additional information.
    """ # noqa: E501
    id: Optional[StrictStr] = None
    action_id: StrictStr
    content_unique_partner_id: Optional[StrictStr] = None
    person_id: Optional[StrictStr]
    report_id: Optional[StrictStr]
    performed_at: Optional[datetime] = None
    performed_by_id: Optional[StrictStr]
    success: Optional[StrictBool] = False
    person: Optional[Person] = None
    performed_by: Optional[UserBase] = None
    action: Optional[ActionBase] = None
    __properties: ClassVar[List[str]] = ["id", "action_id", "content_unique_partner_id", "person_id", "report_id", "performed_at", "performed_by_id", "success", "person", "performed_by", "action"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ExtendedActionHistory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of person
        if self.person:
            _dict['person'] = self.person.to_dict()
        # override the default output from pydantic by calling `to_dict()` of performed_by
        if self.performed_by:
            _dict['performed_by'] = self.performed_by.to_dict()
        # override the default output from pydantic by calling `to_dict()` of action
        if self.action:
            _dict['action'] = self.action.to_dict()
        # set to None if content_unique_partner_id (nullable) is None
        # and model_fields_set contains the field
        if self.content_unique_partner_id is None and "content_unique_partner_id" in self.model_fields_set:
            _dict['content_unique_partner_id'] = None

        # set to None if person_id (nullable) is None
        # and model_fields_set contains the field
        if self.person_id is None and "person_id" in self.model_fields_set:
            _dict['person_id'] = None

        # set to None if report_id (nullable) is None
        # and model_fields_set contains the field
        if self.report_id is None and "report_id" in self.model_fields_set:
            _dict['report_id'] = None

        # set to None if performed_by_id (nullable) is None
        # and model_fields_set contains the field
        if self.performed_by_id is None and "performed_by_id" in self.model_fields_set:
            _dict['performed_by_id'] = None

        # set to None if person (nullable) is None
        # and model_fields_set contains the field
        if self.person is None and "person" in self.model_fields_set:
            _dict['person'] = None

        # set to None if performed_by (nullable) is None
        # and model_fields_set contains the field
        if self.performed_by is None and "performed_by" in self.model_fields_set:
            _dict['performed_by'] = None

        # set to None if action (nullable) is None
        # and model_fields_set contains the field
        if self.action is None and "action" in self.model_fields_set:
            _dict['action'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ExtendedActionHistory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "action_id": obj.get("action_id"),
            "content_unique_partner_id": obj.get("content_unique_partner_id"),
            "person_id": obj.get("person_id"),
            "report_id": obj.get("report_id"),
            "performed_at": obj.get("performed_at"),
            "performed_by_id": obj.get("performed_by_id"),
            "success": obj.get("success") if obj.get("success") is not None else False,
            "person": Person.from_dict(obj["person"]) if obj.get("person") is not None else None,
            "performed_by": UserBase.from_dict(obj["performed_by"]) if obj.get("performed_by") is not None else None,
            "action": ActionBase.from_dict(obj["action"]) if obj.get("action") is not None else None
        })
        return _obj


