# coding: utf-8

"""
    UGC Guard API

    API for UGC Guard. A tool to help you manage reports on user generated content.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IdentityProvider(BaseModel):
    """
    Model for IdentityProviders (like Google, Apple, Hanko, etc.).  Using OpenID Connect (OIDC) for authentication.
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: StrictStr
    logo_url: Optional[StrictStr] = None
    enabled: Optional[StrictBool] = Field(default=False, description="Whether the identity provider is enabled")
    client_id: StrictStr = Field(description="Client ID for the OIDC provider")
    client_secret: StrictStr = Field(description="Client secret for the OIDC provider")
    discovery_url: StrictStr = Field(description="Discovery URL for the OIDC provider")
    organization_id: StrictStr = Field(description="The organization this identity provider belongs to")
    scopes: Optional[StrictStr] = Field(default='openid profile email', description="Scopes to request from the OIDC provider. Default is openid profile email. Separated by spaces.")
    auto_create_user: Optional[StrictBool] = Field(default=True, description="Whether to automatically create a user when they authenticate with this provider. If false, the user must be created manually before they can authenticate.")
    allow_linking: Optional[StrictBool] = Field(default=True, description="Whether to allow linking of this identity provider to existing users (using the E-Mail). If false, users must authenticate with this provider to create a new account.")
    identity_token_user_field: Optional[StrictStr] = Field(default='sub', description="The field in the identity token that contains the user ID. Default is 'sub' which is common in OIDC providers.")
    identity_token_email_field: Optional[StrictStr] = Field(default='email', description="The field in the identity token that contains the user's email. Default is 'email' which is common in OIDC providers.")
    identity_token_username_field: Optional[StrictStr] = Field(default='preferred_username', description="The field in the identity token that contains the user's username. Default is 'preferred_username' which is common in OIDC providers. We will fallback to 'username' if not found, and then to 'email'.")
    identity_token_name_field: Optional[StrictStr] = Field(default='name', description="The field in the identity token that contains the user's username. Default is 'preferred_username' which is common in OIDC providers. We will fallback to 'username' if not found, and then to 'email'.")
    identity_token_avatar_url_field: Optional[StrictStr] = Field(default='picture', description="The field in the identity token that contains the user's avatar URL. Default is 'picture' which is common in OIDC providers.")
    identity_token_channels_mapper_field: Optional[StrictStr] = Field(default='channels', description="The field in the identity token that contains the user's channels. Default is 'channels'.")
    __properties: ClassVar[List[str]] = ["id", "name", "logo_url", "enabled", "client_id", "client_secret", "discovery_url", "organization_id", "scopes", "auto_create_user", "allow_linking", "identity_token_user_field", "identity_token_email_field", "identity_token_username_field", "identity_token_name_field", "identity_token_avatar_url_field", "identity_token_channels_mapper_field"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IdentityProvider from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if logo_url (nullable) is None
        # and model_fields_set contains the field
        if self.logo_url is None and "logo_url" in self.model_fields_set:
            _dict['logo_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IdentityProvider from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "logo_url": obj.get("logo_url"),
            "enabled": obj.get("enabled") if obj.get("enabled") is not None else False,
            "client_id": obj.get("client_id"),
            "client_secret": obj.get("client_secret"),
            "discovery_url": obj.get("discovery_url"),
            "organization_id": obj.get("organization_id"),
            "scopes": obj.get("scopes") if obj.get("scopes") is not None else 'openid profile email',
            "auto_create_user": obj.get("auto_create_user") if obj.get("auto_create_user") is not None else True,
            "allow_linking": obj.get("allow_linking") if obj.get("allow_linking") is not None else True,
            "identity_token_user_field": obj.get("identity_token_user_field") if obj.get("identity_token_user_field") is not None else 'sub',
            "identity_token_email_field": obj.get("identity_token_email_field") if obj.get("identity_token_email_field") is not None else 'email',
            "identity_token_username_field": obj.get("identity_token_username_field") if obj.get("identity_token_username_field") is not None else 'preferred_username',
            "identity_token_name_field": obj.get("identity_token_name_field") if obj.get("identity_token_name_field") is not None else 'name',
            "identity_token_avatar_url_field": obj.get("identity_token_avatar_url_field") if obj.get("identity_token_avatar_url_field") is not None else 'picture',
            "identity_token_channels_mapper_field": obj.get("identity_token_channels_mapper_field") if obj.get("identity_token_channels_mapper_field") is not None else 'channels'
        })
        return _obj


