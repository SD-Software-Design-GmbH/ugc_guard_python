# coding: utf-8

"""
    UGC Guard API

    API for UGC Guard. A tool to help you manage reports on user generated content.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ugc_guard_python.models.log_type import LogType
from ugc_guard_python.models.user_base import UserBase
from typing import Optional, Set
from typing_extensions import Self

class MailLogWithInvoker(BaseModel):
    """
    Pydantic model for MailLog with additional invoker information.
    """ # noqa: E501
    id: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    message: Optional[StrictStr] = None
    content: Optional[Dict[str, Any]] = None
    log_type: Optional[LogType] = Field(default=None, description="Type of the log entry (created, updated, deleted)")
    invoker_id: Optional[StrictStr] = None
    organization_id: Optional[StrictStr] = None
    email: Optional[StrictStr]
    successful: StrictBool
    error_message: Optional[StrictStr]
    hidden: StrictBool
    mail_invoker: Optional[UserBase] = None
    __properties: ClassVar[List[str]] = ["id", "created_at", "message", "content", "log_type", "invoker_id", "organization_id", "email", "successful", "error_message", "hidden", "mail_invoker"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MailLogWithInvoker from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of mail_invoker
        if self.mail_invoker:
            _dict['mail_invoker'] = self.mail_invoker.to_dict()
        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if message (nullable) is None
        # and model_fields_set contains the field
        if self.message is None and "message" in self.model_fields_set:
            _dict['message'] = None

        # set to None if content (nullable) is None
        # and model_fields_set contains the field
        if self.content is None and "content" in self.model_fields_set:
            _dict['content'] = None

        # set to None if invoker_id (nullable) is None
        # and model_fields_set contains the field
        if self.invoker_id is None and "invoker_id" in self.model_fields_set:
            _dict['invoker_id'] = None

        # set to None if organization_id (nullable) is None
        # and model_fields_set contains the field
        if self.organization_id is None and "organization_id" in self.model_fields_set:
            _dict['organization_id'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if error_message (nullable) is None
        # and model_fields_set contains the field
        if self.error_message is None and "error_message" in self.model_fields_set:
            _dict['error_message'] = None

        # set to None if mail_invoker (nullable) is None
        # and model_fields_set contains the field
        if self.mail_invoker is None and "mail_invoker" in self.model_fields_set:
            _dict['mail_invoker'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MailLogWithInvoker from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "message": obj.get("message"),
            "content": obj.get("content"),
            "log_type": obj.get("log_type"),
            "invoker_id": obj.get("invoker_id"),
            "organization_id": obj.get("organization_id"),
            "email": obj.get("email"),
            "successful": obj.get("successful"),
            "error_message": obj.get("error_message"),
            "hidden": obj.get("hidden"),
            "mail_invoker": UserBase.from_dict(obj["mail_invoker"]) if obj.get("mail_invoker") is not None else None
        })
        return _obj


